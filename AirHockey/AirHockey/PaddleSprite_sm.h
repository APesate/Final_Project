/*
 * ex: set ro:
 * DO NOT EDIT.
 * generated by smc (http://smc.sourceforge.net/)
 * from file : PaddleSprite.sm
 */


#import "statemap.h"

// Forward declarations.
@class PaddleSpriteMap;
@class PaddleSpriteMap_Defending;
@class PaddleSpriteMap_Attacking;
@class PaddleSpriteMap_FallingBack;
@class PaddleSpriteMap_Default;
@class PaddleSpriteState;
@class PaddleSpriteContext;
@class PaddleSprite;

@interface PaddleSpriteState : SMCState
{
}
- (void)Entry:(PaddleSpriteContext*)context;
- (void)Exit:(PaddleSpriteContext*)context;

- (void)attack:(PaddleSpriteContext*)context;
- (void)defend:(PaddleSpriteContext*)context;
- (void)fallBack:(PaddleSpriteContext*)context;
- (void)fallback:(PaddleSpriteContext*)context;
- (void)update:(PaddleSpriteContext*)context :(ccTime)delta;

- (void)Default:(PaddleSpriteContext*)context;
@end

@interface PaddleSpriteMap : NSObject
{
}
+ (PaddleSpriteMap_Defending*)Defending;
+ (PaddleSpriteMap_Attacking*)Attacking;
+ (PaddleSpriteMap_FallingBack*)FallingBack;
@end

@interface PaddleSpriteMap_Default : PaddleSpriteState
{
}
- (void)attack:(PaddleSpriteContext*)context;
- (void)defend:(PaddleSpriteContext*)context;
- (void)update:(PaddleSpriteContext*)context :(ccTime)delta;
- (void)fallback:(PaddleSpriteContext*)context;
@end

@interface PaddleSpriteMap_Defending : PaddleSpriteMap_Default
{
}
 -(void)Entry:(PaddleSpriteContext*)context;
 -(void)Exit:(PaddleSpriteContext*)context;
- (void)attack:(PaddleSpriteContext*)context;
- (void)defend:(PaddleSpriteContext*)context;
- (void)update:(PaddleSpriteContext*)context :(ccTime)delta;
@end

@interface PaddleSpriteMap_Attacking : PaddleSpriteMap_Default
{
}
 -(void)Entry:(PaddleSpriteContext*)context;
 -(void)Exit:(PaddleSpriteContext*)context;
- (void)attack:(PaddleSpriteContext*)context;
- (void)fallBack:(PaddleSpriteContext*)context;
- (void)update:(PaddleSpriteContext*)context :(ccTime)delta;
@end

@interface PaddleSpriteMap_FallingBack : PaddleSpriteMap_Default
{
}
 -(void)Entry:(PaddleSpriteContext*)context;
 -(void)Exit:(PaddleSpriteContext*)context;
- (void)defend:(PaddleSpriteContext*)context;
@end

@interface PaddleSpriteContext : SMCFSMContext
{
    PaddleSprite *_owner;
}
- (id)initWithOwner:(PaddleSprite*)owner;
- (id)initWithOwner:(PaddleSprite*)owner state:(SMCState*)aState;
- (PaddleSprite*)owner;
- (PaddleSpriteState*)state;

- (void)enterStartState;

- (void)attack;
- (void)defend;
- (void)fallBack;
- (void)fallback;
- (void)update:(ccTime)delta;
@end


/*
 * Local variables:
 *  buffer-read-only: t
 * End:
 */
